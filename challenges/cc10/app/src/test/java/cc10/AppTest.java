/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package cc10;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }
    //    Can successfully push onto a stack
    @Test void pushStack() {
        Stack<Integer> stackList = new Stack<>();
        stackList.push(2);
        assertEquals( "Top = 2 -> Null" , stackList.toString());
    }

    //    Can successfully push multiple values onto a stack
    @Test void pushMultipleStack() {
        Stack<Integer> stackList = new Stack<>();
        stackList.push(2);
        stackList.push(1);
        stackList.push(8);
        stackList.push(10);
        assertEquals( "Top = 10 -> 8 -> 1 -> 2 -> Null" , stackList.toString());
    }

    //    Can successfully pop off the stack
    @Test void popOffStack() {
        Stack<Integer> stackList = new Stack<>();
        stackList.push(2);
        stackList.push(1);
        stackList.push(8);
        stackList.push(10);
        assertEquals( 10 , stackList.pop() );
    }

    //    Can successfully empty a stack after multiple pops
    @Test void emptyStack() {
        Stack<Integer> stackList = new Stack<>();
        stackList.push(2);
        stackList.push(1);
        stackList.push(8);
        stackList.pop();
        stackList.pop();
        stackList.pop();
        assertEquals( "null" , stackList.toString());
    }

    //    Can successfully peek the next item on the stack
    @Test void peekTheNextItem() {
        Stack<Integer> stackList = new Stack<>();
        stackList.push(2);
        stackList.push(1);
        stackList.push(8);
        stackList.pop();
        assertEquals( 1 , stackList.peek());
    }

    //    Can successfully instantiate an empty stack
    @Test void instantiateEmptyStack() {
        Stack<Integer> stackList = new Stack<>();
        assertEquals( "null" , stackList.toString());
    }

    //    Calling pop or peek on empty stack raises exception
    @Test void popPeekEmptyStack() {
        Stack<Integer> stackList = new Stack<>();
        assertNull(stackList.pop());
        assertNull(stackList.peek());
    }

    //    Can successfully enqueue into a queue
    @Test void pushQueue() {
        Queue<String> queueList = new Queue<>();
        queueList.enqueue("2");
        assertEquals( "Front = 2 -> Null" , queueList.toString());
    }

    //    Can successfully enqueue multiple values into a queue
    @Test void pushMultipleQueue() {
        Queue<String> queueList = new Queue<>();
        queueList.enqueue("1");
        queueList.enqueue("8");
        queueList.enqueue("10");
        assertEquals( "Front = 1 -> 8 -> 10 -> Null" , queueList.toString());
    }

    //    Can successfully dequeue out of a queue the expected value
    @Test void dequeueOutQueue() {
        Queue<String> queueList = new Queue<>();
        queueList.enqueue("1");
        queueList.enqueue("8");
        queueList.enqueue("10");
        assertEquals( "1" , queueList.dequeue());
    }

    //    Can successfully peek into a queue, seeing the expected value
    @Test void peekQueue() {
        Queue<String> queueList = new Queue<>();
        queueList.enqueue("1");
        queueList.enqueue("8");
        queueList.enqueue("10");
        assertEquals( "1" , queueList.peek());
    }

    //    Can successfully empty a queue after multiple dequeues
    @Test void emptyQueue() {
        Queue<String> queueList = new Queue<>();
        queueList.enqueue("1");
        queueList.enqueue("8");
        queueList.enqueue("10");
        queueList.dequeue();
        queueList.dequeue();
        queueList.dequeue();
        queueList.dequeue();
        assertEquals( "null" , queueList.toString());
    }

    //    Can successfully instantiate an empty queue
    @Test void instantiateEmptyQueue() {
        Queue<String> queueList = new Queue<>();
        assertEquals( "null" , queueList.toString());
    }

    //    Calling dequeue or peek on empty queue raises exception
    @Test void dequeuePeekEmptyQueue() {
        Queue<String> queueList = new Queue<>();
        assertNull(queueList.dequeue());
        assertNull(queueList.peek());
    }
}
