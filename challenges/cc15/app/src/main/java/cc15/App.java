/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package cc15;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());

        BinaryTree<Integer> newTree = new BinaryTree<>();

        Node<Integer> node1 = new Node<>(2);
        Node<Integer> node2 = new Node<>(3);
        Node<Integer> node3 = new Node<>(1, node1, node2);
        Node<Integer> node5 = new Node<>(6);
        Node<Integer> node4 = new Node<>(4, node5, null);
        Node<Integer> newTreeRoot = new Node<>(5, node3, node4);

        System.out.println(newTree.preOrder(newTreeRoot));
        System.out.println("==================================");
        System.out.println(newTree.inOrder(newTreeRoot));
        System.out.println("==================================");
        System.out.println(newTree.postOrder(newTreeRoot));
        System.out.println("==================================");
        System.out.println(newTree.toString());
        System.out.println("==================================");

        /* ---------------------------------------------------------------------------- */

        BinarySearchTree binarySearchTree = new BinarySearchTree();

        Node<Integer> searchNode0 = new Node<>(22);
        Node<Integer> searchNode1 = new Node<>(4);
        Node<Integer> searchNode2 = new Node<>(16, null, searchNode0);
        Node<Integer> searchNode3 = new Node<>(8, searchNode1, searchNode2);
        Node<Integer> searchNode5 = new Node<>(27);
        Node<Integer> searchNode7 = new Node<>(105);
        Node<Integer> searchNode6 = new Node<>(85, null, searchNode7);
        Node<Integer> searchNode4 = new Node<>(42, searchNode5, searchNode6);
        binarySearchTree.root = new Node<>(23, searchNode3, searchNode4);
        binarySearchTree.add(15);
        binarySearchTree.add(9);
        binarySearchTree.add(28);
        binarySearchTree.add(28);
        binarySearchTree.add(-1);
        System.out.println(binarySearchTree.preOrder(binarySearchTree.root));
        System.out.println("==================================");
        System.out.println(binarySearchTree.inOrder(binarySearchTree.root));
        System.out.println("==================================");
        System.out.println(binarySearchTree.postOrder(binarySearchTree.root));
        System.out.println("==================================");
        System.out.println("False the result is : " + binarySearchTree.contains(7));
        System.out.println("True the result is : " + binarySearchTree.contains(105));
        System.out.println("False the result is : " + binarySearchTree.contains(-15));
        System.out.println("True the result is : " + binarySearchTree.contains(-1));
        System.out.println("True the result is : " + binarySearchTree.contains(23));
    }
}
