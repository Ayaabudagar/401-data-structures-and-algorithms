/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package trees;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }
    @Test void BinaryTreeTest(){
//        Can successfully instantiate an empty tree
        BinaryTree<Integer> testBinary = new BinaryTree<>();
        assertNull(testBinary.root);


//        Can successfully instantiate a tree with a single root node
        BinaryTree<Integer> testBinary2 = new BinaryTree<>(1);
        assertEquals(1,testBinary2.root.value);


//        Can successfully add a left child and right child to a single root node
        testBinary2.root.left = new Node<>(3);
        testBinary2.root.right= new Node<>(5);
        assertEquals(3,testBinary2.root.left.value);
        assertEquals(5,testBinary2.root.right.value);


//        Can successfully return a collection from a preorder traversal
        assertEquals("[1, 3, 5]",testBinary2.preOrder(testBinary2.root).toString());


//        Can successfully return a collection from an inorder traversal
        assertEquals("[3, 1, 5]",testBinary2.inOrder(testBinary2.root).toString());


//        Can successfully return a collection from a postorder traversal
        assertEquals("[3, 5, 1]",testBinary2.postOrder(testBinary2.root).toString());


        //challenge 17 tests
   
        assertEquals("[1, 3, 5]",App.firstBreadth(testBinary2).toString());


        //check for an empty tree
        assertEquals("[]",App.firstBreadth(testBinary).toString());














    }
}
